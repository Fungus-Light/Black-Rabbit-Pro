"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDialog = exports.DialogManager = void 0;
const csharp_1 = require("csharp");
const SayDialog_1 = require("Dialog/SayDialog");
const OptionDialog_1 = require("Dialog/OptionDialog");
const Common_1 = require("Utils/Common");
/**
 * Manage A Dialog FLow
 */
class DialogManager {
    constructor() {
        this.FlowList = new Array();
        this.index = 0;
    }
    Option(text, action, optionDialogName, interactable, hidewhenclick) {
        let OptionDialog = null;
        if (optionDialogName != undefined && optionDialogName != "") {
            OptionDialog = OptionDialog_1.$OptionDialog(optionDialogName);
            if (OptionDialog == null) {
                Common_1.Debug.LogError("SayDialog " + optionDialogName + "Can Not Be Found!!!");
                return;
            }
        }
        if (OptionDialog == null) {
            OptionDialog = OptionDialog_1.$OptionDialog();
        }
        if (interactable == undefined) {
            interactable = true;
        }
        if (hidewhenclick == undefined) {
            hidewhenclick = false;
        }
        if (action != undefined) {
            this.FlowList.push(() => {
                OptionDialog.AddOptionTs(text, interactable, hidewhenclick, action);
                this.Gonext();
            });
        }
        else {
            this.FlowList.push(() => {
                OptionDialog.AddOptionTs(text, interactable, hidewhenclick, () => { });
                this.Gonext();
            });
        }
    }
    Say(text, dialogName, character, clearPrevious, waitForInput, fadeWhenDone, stopVoiceover, waitForVO, clip) {
        let Dialog = null;
        if (dialogName != undefined && dialogName != "") {
            Dialog = SayDialog_1.$SayDialog(dialogName);
            if (Dialog == null) {
                Common_1.Debug.LogError("SayDialog " + dialogName + "Can Not Be Found!!!");
                return;
            }
        }
        if (Dialog == undefined) {
            Dialog = SayDialog_1.$SayDialog();
        }
        if (character != undefined) {
            Dialog.SetCharacter(character);
        }
        if (clearPrevious == undefined) {
            clearPrevious = true;
        }
        if (waitForInput == undefined) {
            waitForInput = true;
        }
        if (fadeWhenDone == undefined) {
            fadeWhenDone = true;
        }
        if (stopVoiceover == undefined) {
            stopVoiceover = true;
        }
        if (waitForVO == undefined) {
            waitForVO = true;
        }
        if (clip == undefined) {
            clip = null;
        }
        //Debug.LogWarning(text + " " + fadeWhenDone + " " + clearPrevious + " " + waitForInput + " " + waitForVO + " " + stopVoiceover)
        this.FlowList.push(() => {
            Dialog.gameObject.SetActive(true);
            Dialog.Say(text, clearPrevious, waitForInput, fadeWhenDone, stopVoiceover, waitForVO, clip, () => {
                this.Gonext();
            });
        });
    }
    WaitForFrames(count) {
        this.FlowList.push(() => {
            csharp_1.CommonJsCall.WaitForFrames(Math.floor(count), () => {
                this.Gonext();
            });
        });
    }
    WaitForSeconds(count) {
        this.FlowList.push(() => {
            csharp_1.CommonJsCall.WaitForSeconds(count, () => {
                this.Gonext();
            });
        });
    }
    WaitForSecondsUnscaled(count) {
        this.FlowList.push(() => {
            csharp_1.CommonJsCall.WaitForSecondsRealtime(count, () => {
                this.Gonext();
            });
        });
    }
    DoAction(action) {
        this.FlowList.push(() => {
            csharp_1.CommonJsCall.DoAction(action, () => {
                this.Gonext();
            });
        });
    }
    /**
     * Set The CallBack When Flow is End
     * @param cb
     */
    SetCallBack(cb) {
        this.CB = cb;
        Common_1.Debug.LogWarning("Call Back Setted");
    }
    Gonext() {
        if (this.FlowList.length > 0 && this.index < this.FlowList.length) {
            let step = this.FlowList[this.index];
            this.index++;
            step();
        }
        else {
            Common_1.Debug.LogWarning("Nothing To Talk.");
            if (this.CB == null) {
                Common_1.Debug.LogWarning("CB is Nothing");
            }
            else {
                this.CB();
            }
        }
    }
    /**
     * Start A FLow
     */
    Start() {
        this.index = 0;
        this.Gonext();
    }
}
exports.DialogManager = DialogManager;
function CreateDialog() {
    return new DialogManager;
}
exports.CreateDialog = CreateDialog;
//# sourceMappingURL=DialogManager.js.map